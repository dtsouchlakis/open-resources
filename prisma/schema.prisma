// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  output   = "prisma"
  language = "typescript"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Some fields are there just for the eventual expansion of the project

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                String      @id @default(cuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  passwordHash      String?
  accounts          Account[]
  sessions          Session[]
  files             File[]
  employee          Employee?
  Department        Department? @relation(fields: [departmentid], references: [id])
  departmentid      String?
  HolidaysRequested Holiday[]   @relation(name: "RequestedByUser")
  HolidaysApproved  Holiday[]   @relation(name: "ApprovedByUser")
  Training          Training[]

  @@index([email])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model File {
  id         String    @id
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  url        String
  size       Int
  type       String
  Company    Company?  @relation(fields: [companyid], references: [id])
  companyid  String?
  Training   Training? @relation(fields: [trainingid], references: [id])
  trainingid String?

  @@unique([userId, url])
  @@index([userId])
}

model Holiday {
  id                String   @id
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  requestedByUser   User     @relation(name: "RequestedByUser", fields: [requestedByUserId], references: [id])
  requestedByUserId String
  dateFrom          DateTime
  dateTo            DateTime
  days              Int
  requestedAt       DateTime
  approvedAt        DateTime
  approvedByUser    User?    @relation(name: "ApprovedByUser", fields: [approvedByUserId], references: [id])
  approvedByUserId  String
  description       String

  @@unique([requestedByUserId, dateFrom, dateTo])
  @@index([requestedByUserId])
}

model Training {
  id          String   @id
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  dateFrom    DateTime
  dateTo      DateTime
  description String
  files       File[]

  @@unique([userId, dateFrom, dateTo])
  @@index([userId])
}

model Employee {
  id              String     @id
  name            String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  user            User       @relation(fields: [userId], references: [id])
  userId          String     @unique
  email           String
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  gender          String
  title           String
  hiredAt         DateTime
  lastDayWorkedAt DateTime
  mobile          String
  phone           String
  address         String
  positionTitle   String
  department      Department @relation(fields: [departmentId], references: [id])
  departmentId    String
  manager         Employee   @relation(name: "Subordinate", fields: [subordinateId], references: [id])
  managerId       String
  image           String
  bio             String
  subordinate     Employee?  @relation(name: "Subordinate")
  subordinateId   String     @unique
  Company         Company?   @relation(fields: [companyid], references: [id])
  companyid       String?

  @@index([userId, email, firstName, lastName, departmentId, managerId, subordinateId])
}

model Department {
  id             String     @id
  departmentName String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  users          User[]
  employees      Employee[]
  Company        Company?   @relation(fields: [companyid], references: [id])
  companyid      String?

  @@index([departmentName])
}

model Company {
  id             String       @id
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  employees      Employee[]
  files          File[]
  departments    Department[]
  sectors        String[]
  locations      String[]
  telephone      String
  email          String
  website        String
  address        String
  description    String
  representative String

  @@index([name, telephone, email, website, address])
}
